version: "2.2"

services:
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01-single-node-cluster\n"\
          "    dns:\n"\
          "      - es01-single-node-cluster\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions";
        # give group 'elasticsearch' ownership
        chown -R root:elasticsearch config/certs

        # make parent dirs traversable
        chmod 755 config
        chmod 755 config/certs

        # directories 755, files 644 (safe), then tighten the private key
        find config/certs -type d -exec chmod 755 {} \;
        find config/certs -type f -exec chmod 644 {} \;

        # private key should not be world-readable
        chown elasticsearch:elasticsearch config/certs/es01-single-node-cluster/es01-single-node-cluster.key || true
        chmod 640 config/certs/es01-single-node-cluster/es01-single-node-cluster.key || true
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01-single-node-cluster:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01-single-node-cluster:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01-single-node-cluster/es01-single-node-cluster.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - elk-docker

  es01-single-node-cluster:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01-single-node-cluster:/usr/share/elasticsearch/data
    ports:
      - "${ES_01_PORT}:9200"
    environment:
      user: "1000:1000"
      node.name: es01-single-node-cluster
      cluster.name: ${CLUSTER_NAME}
      cluster.initial_master_nodes: es01-single-node-cluster
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
      ES_01_PORT: ${ES_01_PORT}
      bootstrap.memory_lock: "false"          # easier on small hosts

      xpack.security.enabled: "true"
      xpack.security.http.ssl.enabled: "true"
      xpack.security.http.ssl.key: certs/es01-single-node-cluster/es01-single-node-cluster.key
      xpack.security.http.ssl.certificate: certs/es01-single-node-cluster/es01-single-node-cluster.crt
      xpack.security.http.ssl.certificate_authorities: certs/ca/ca.crt

      xpack.security.transport.ssl.enabled: "true"
      xpack.security.transport.ssl.key: certs/es01-single-node-cluster/es01-single-node-cluster.key
      xpack.security.transport.ssl.certificate: certs/es01-single-node-cluster/es01-single-node-cluster.crt
      xpack.security.transport.ssl.certificate_authorities: certs/ca/ca.crt
      xpack.security.transport.ssl.verification_mode: certificate

      xpack.license.self_generated.type: ${LICENSE}
      xpack.ml.use_auto_machine_memory_percent: "true"
      xpack.ml.enabled: "false"               # save RAM
      action.destructive_requires_name: "false"

      ES_JAVA_OPTS: "-Xms512m -Xmx512m"       # adjust to your host

      # CORS for Elasticvue
      http.cors.enabled: "true"
      http.cors.allow-origin: "http://127.0.0.1:8081"
      http.cors.allow-headers: "X-Requested-With,Content-Type,Content-Length,Authorization"
      http.cors.allow-credentials: "true"
    mem_limit: ${MEM_LIMIT}
    # comment memlock while bootstrap.memory_lock=false
    # ulimits:
    #   memlock:
    #     soft: -1
    #     hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elk-docker

  kibana-single-node-cluster:
    depends_on:
      es01-single-node-cluster:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata01-single-node-cluster:/usr/share/kibana/data
    ports:
      - "${KIBANA_PORT}:5601"
    environment:
      SERVERNAME: kibana
      ELASTICSEARCH_HOSTS: "https://es01-single-node-cluster:9200"
      ELASTICSEARCH_USERNAME: kibana_system
      ELASTICSEARCH_PASSWORD: ${KIBANA_PASSWORD}
      ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES: config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elk-docker

volumes:
  certs:
    name: elastic-certs
    driver: local
  esdata01-single-node-cluster:
    name: elastic-single-esdata-01
    driver: local
  kibanadata01-single-node-cluster:
    name: elastic-single-kibanadata-01
    driver: local


networks:
  elk-docker:
    external: true
