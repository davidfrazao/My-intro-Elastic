version: "3.9"

# .env expected (examples)
# STACK_VERSION=8.9.0
# CLUSTER_NAME=es-docker-cluster
# LICENSE=basic
# ES_JAVA_HEAP=512m
# ES_MEM_LIMIT=1g
# ELASTIC_PASSWORD=changeme
# KIBANA_PASSWORD=changeme
# ES_01_PORT=59200
# ES_02_PORT=59201
# ES_03_PORT=59202
# KIBANA_PORT=5601
# PROM_PORT=9090
# GRAFANA_PORT=53000
# UID=1000
# GID=1000
# ES_EXPORTER_PORT=59114
# PROM_RETENTION_TIME=15d
# PROM_RETENTION_SIZE=10GB

networks:
  elk-docker:
    external: true

volumes:
  certs:
  es01-data-3-nodes:
  es02-data-3-nodes:
  es03-data-3-nodes:
  kibana-data-3-nodes:
  prometheus-data-3-nodes:
  grafana-data-3-nodes:
  elasticsearch-exporter-data-3-nodes:

services:

  ###########################################################################
  # Certs bootstrap (no cycles; ES nodes wait on this via service_healthy)  #
  ###########################################################################

  setup-fix-perms:
    image: busybox:1.36
    command: ["sh","-lc","chown -R ${UID}:${GID} /usr/share/elasticsearch/config/certs && chmod -R u+rwX,g+rwX /usr/share/elasticsearch/config/certs"]
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    restart: "no"

  setup-certs:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es03\n"\
          "    dns:\n"\
          "      - es03\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 {} \;
        find . -type f -exec chmod 640 {} \;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 2s
      timeout: 5s
      retries: 120
    restart: "no"
    networks: [elk-docker]

  ###########################################################################
  # ES nodes (don’t set user: — image expects uid 1000 inside container)    #
  ###########################################################################

  es01-fix-perms:
    image: busybox:1.36
    command: ["sh","-lc","chown -R 1000:0 /usr/share/elasticsearch/data && chmod -R u+rwX,g+rwX /usr/share/elasticsearch/data"]
    volumes: [ "es01-data-3-nodes:/usr/share/elasticsearch/data" ]
    restart: "no"

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    depends_on:
      setup-certs: { condition: service_healthy }
      es01-fix-perms: { condition: service_completed_successfully }
    volumes:
      - certs:/usr/share/elasticsearch/config/certs:ro
      - es01-data-3-nodes:/usr/share/elasticsearch/data
    ports:
      - "${ES_01_PORT}:9200"
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
      - action.destructive_requires_name=false
      - ES_JAVA_OPTS=-Xms${ES_JAVA_HEAP} -Xmx${ES_JAVA_HEAP}
      # CORS (Elasticvue)
      - http.cors.enabled=true
      - http.cors.allow-origin=http://127.0.0.1:8081
      - http.cors.allow-headers=X-Requested-With,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
    mem_limit: ${ES_MEM_LIMIT:-1g}
    ulimits:
      memlock: { soft: -1, hard: -1 }
      nofile:  { soft: 65536, hard: 65536 }
    cap_add: [ "IPC_LOCK" ]
    healthcheck:
      test: ["CMD-SHELL","curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"]
      interval: 10s
      timeout: 10s
      retries: 120
    networks: [elk-docker]

  es02-fix-perms:
    image: busybox:1.36
    command: ["sh","-lc","chown -R 1000:0 /usr/share/elasticsearch/data && chmod -R u+rwX,g+rwX /usr/share/elasticsearch/data"]
    volumes: [ "es02-data-3-nodes:/usr/share/elasticsearch/data" ]
    restart: "no"

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    depends_on:
      setup-certs: { condition: service_healthy }
      es02-fix-perms: { condition: service_completed_successfully }
    volumes:
      - certs:/usr/share/elasticsearch/config/certs:ro
      - es02-data-3-nodes:/usr/share/elasticsearch/data
    ports:
      - "${ES_02_PORT}:9200"
    environment:
      - node.name=es02
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
      - action.destructive_requires_name=false
      - ES_JAVA_OPTS=-Xms${ES_JAVA_HEAP} -Xmx${ES_JAVA_HEAP}
      - http.cors.enabled=true
      - http.cors.allow-origin=http://127.0.0.1:8081
      - http.cors.allow-headers=X-Requested-With,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
    mem_limit: ${ES_MEM_LIMIT:-1g}
    ulimits:
      memlock: { soft: -1, hard: -1 }
      nofile:  { soft: 65536, hard: 65536 }
    cap_add: [ "IPC_LOCK" ]
    healthcheck:
      test: ["CMD-SHELL","curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"]
      interval: 10s
      timeout: 10s
      retries: 120
    networks: [elk-docker]

  es03-fix-perms:
    image: busybox:1.36
    command: ["sh","-lc","chown -R 1000:0 /usr/share/elasticsearch/data && chmod -R u+rwX,g+rwX /usr/share/elasticsearch/data"]
    volumes: [ "es03-data-3-nodes:/usr/share/elasticsearch/data" ]
    restart: "no"

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    depends_on:
      setup-certs: { condition: service_healthy }
      es03-fix-perms: { condition: service_completed_successfully }
    volumes:
      - certs:/usr/share/elasticsearch/config/certs:ro
      - es03-data-3-nodes:/usr/share/elasticsearch/data
    ports:
      - "${ES_03_PORT}:9200"
    environment:
      - node.name=es03
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01,es02
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es03/es03.key
      - xpack.security.http.ssl.certificate=certs/es03/es03.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es03/es03.key
      - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
      - action.destructive_requires_name=false
      - ES_JAVA_OPTS=-Xms${ES_JAVA_HEAP} -Xmx${ES_JAVA_HEAP}
      - http.cors.enabled=true
      - http.cors.allow-origin=http://127.0.0.1:8081
      - http.cors.allow-headers=X-Requested-With,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
    mem_limit: ${ES_MEM_LIMIT:-1g}
    ulimits:
      memlock: { soft: -1, hard: -1 }
      nofile:  { soft: 65536, hard: 65536 }
    cap_add: [ "IPC_LOCK" ]
    healthcheck:
      test: ["CMD-SHELL","curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"]
      interval: 10s
      timeout: 10s
      retries: 120
    networks: [elk-docker]

  ######################################
  # Kibana                             #
  ######################################
  kibana-fix-perms:
    image: busybox:1.36
    command: ["sh","-lc","chown -R ${UID:-1000}:${GID:-1000} /usr/share/kibana/data && chmod -R u+rwX,g+rwX /usr/share/kibana/data"]
    volumes: [ "kibana-data-3-nodes:/usr/share/kibana/data" ]
    restart: "no"

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    depends_on:
      es01: { condition: service_healthy }
      es02: { condition: service_healthy }
      es03: { condition: service_healthy }
      kibana-fix-perms: { condition: service_completed_successfully }
    volumes:
      - certs:/usr/share/kibana/config/certs:ro
      - kibana-data-3-nodes:/usr/share/kibana/data
    ports:
      - "${KIBANA_PORT}:5601"
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${ES_MEM_LIMIT:-1g}
    healthcheck:
      test: ["CMD-SHELL","curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302'"]
      interval: 10s
      timeout: 10s
      retries: 120
    networks: [elk-docker]

  ######################################
  # Prometheus                         #
  ######################################
  prometheus-fix-perms:
    image: busybox:1.36
    command: ["sh","-lc","chown -R ${UID:-1000}:${GID:-1000} /prometheus && chmod -R u+rwX,g+rwX /prometheus"]
    volumes: [ "prometheus-data-3-nodes:/prometheus" ]
    restart: "no"

  prometheus:
    image: quay.io/prometheus/prometheus:v3.6.0
    container_name: prometheus
    user: "${UID:-1000}:${GID:-1000}"
    depends_on:
      prometheus-fix-perms: { condition: service_completed_successfully }
    ports:
      - "${PROM_PORT:-9090}:9090"
    volumes:
      - ${PWD}/docker-compose-main/elasticsearch_3_nodes_with_certs/data/prometheus/etc:/etc/prometheus:ro
      - prometheus-data-3-nodes:/prometheus
    environment:
      UID: "${UID:-1000}"
      GID: "${GID:-1000}"
      PROM_PORT: "${PROM_PORT:-9090}"
      PROM_RETENTION_TIME: "${PROM_RETENTION_TIME:-15d}"
      PROM_RETENTION_SIZE: "${PROM_RETENTION_SIZE:-10GB}"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --web.enable-admin-api
      - --storage.tsdb.retention.time=${PROM_RETENTION_TIME:-15d}
      - --storage.tsdb.retention.size=${PROM_RETENTION_SIZE:-10GB}
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:9090/-/ready"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 20s
    restart: unless-stopped
    mem_limit: 512M
    cpus: "1.0"
    networks: [elk-docker]

  ######################################
  # Grafana                            #
  ######################################
  grafana-fix-perms:
    image: busybox:1.36
    command: ["sh","-lc","chown -R ${UID:-1000}:${GID:-1000} /var/lib/grafana && chmod -R u+rwX,g+rwX /var/lib/grafana"]
    volumes: [ "grafana-data-3-nodes:/var/lib/grafana" ]
    restart: "no"

  grafana:
    image: grafana/grafana:12.2.0
    container_name: grafana
    user: "${UID:-1000}:${GID:-1000}"
    depends_on:
      grafana-fix-perms: { condition: service_completed_successfully }
      prometheus:
        condition: service_started
    ports:
      - "${GRAFANA_PORT:-53000}:3000"
    volumes:
      - grafana-data-3-nodes:/var/lib/grafana
      - ${PWD}/docker-compose-main/elasticsearch_3_nodes_with_certs/data/grafana/etc:/etc/grafana
    deploy:
      resources:
        limits: { cpus: "1.0", memory: 1G }
        reservations: { cpus: "0.5", memory: 512M }
    networks: [elk-docker]

  ######################################
  # Elasticsearch Exporter             #
  ######################################
  elasticsearch_exporter:
    image: quay.io/prometheuscommunity/elasticsearch-exporter:latest
    container_name: elasticsearch_exporter
    user: "${UID:-1000}:${GID:-1000}"
    depends_on:
      es01: { condition: service_healthy }
    volumes:
      - certs:/certs:ro
      # Optional persistent dir if you need it:
      # - elasticsearch-exporter-data-3-nodes:/elasticsearch_exporter

    command:
        - '--es.uri=https://elastic:elastic@es03:9200'
        # https://elastic:elastic@es02:9200
        - '--es.ssl-skip-verify'    # change if needed
        - '--es.indices'
        - '--es.all'
        - '--es.indices_mappings'
        - '--es.aliases'
        - '--es.shards'
        - '--es.indices_settings'
        - '--es.timeout=10s'
        - '--web.listen-address=:9114'
    restart: always
    ports:
      - "${ES_EXPORTER_PORT:-9114}:9114"
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:9114/metrics | head -n1 >/dev/null || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 15s
    networks: [elk-docker]


