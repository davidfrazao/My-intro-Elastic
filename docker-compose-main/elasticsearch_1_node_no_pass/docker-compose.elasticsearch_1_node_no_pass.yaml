version: "3.7"
services:

## prometheus
  prometheus-es-1-node:
    image: quay.io/prometheus/prometheus:v3.6.0
    container_name: prometheus-es-1-node
    volumes:
     - ${PWD}/docker-compose-main/elasticsearch_1_node_no_pass/data/prometheus/etc:/etc/prometheus/
     - ${PWD}/docker-compose-main/elasticsearch_1_node_no_pass/data/prometheus/data:/prometheus/
    command: '--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.enable-admin-api'
    ports:
     - 59090:9090
    networks:
     - elk-docker
     
## grafana
  grafana-es-1-node:
    image: grafana/grafana:12.2.0
    container_name: grafana-es-1-node
    user: 0:0
    ports:
     - 53000:3000
    volumes:
     - ${PWD}/docker-compose-main/elasticsearch_1_node_no_pass/data/grafana/etc:/etc/grafana/
     - ${PWD}/docker-compose-main/elasticsearch_1_node_no_pass/data/grafana/etc/provisioning/datasources/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
     - ${PWD}/docker-compose-main/elasticsearch_1_node_no_pass/data/grafana/data:/var/lib/grafana
    networks:
     - elk-docker
    depends_on: 
      - prometheus-es-1-node

# elasticsearch
  elasticsearch-1-node-no-pass:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch-1-node-no-pass
    environment:
      -  cluster.name=docker-cluster-elasticsearch
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - discovery.type=single-node
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=2gb
      - cluster.routing.allocation.disk.watermark.high=1gb
      - cluster.routing.allocation.disk.watermark.flood_stage=512mb
      # CORS (Elasticvue) docker
      - http.cors.enabled=true
      - http.cors.allow-origin=http://127.0.0.1:8081
      - http.cors.allow-headers=X-Requested-With,Content-Type,Content-Length,Authorization
      - http.cors.allow-credentials=true
    mem_limit: 4g
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - ${PWD}/docker-compose-main/elasticsearch_1_node_no_pass/data/elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - 58881:9200
      - 58882:9300
    networks:
     - elk-docker

## Kibana
  kibana-es.1.node:
    container_name: kibana-es.1.node
    image: docker.elastic.co/kibana/kibana:8.9.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-1-node-no-pass:9200
    ports:
      - 58889:5601
    depends_on:
      - elasticsearch-1-node-no-pass
    networks:
      - elk-docker

## elasticsearch_exporter  
  elasticsearch_exporter-es-1-node:
      image: quay.io/prometheuscommunity/elasticsearch-exporter:latest
      container_name: elasticsearch_exporter-es-1-node
      user: root
      # volumes:
      #   - ${PWD}/data/elasticsearch_exporter:/elasticsearch_exporter
      command: 
        - '--es.uri=http://elasticsearch-1-node-no-pass:9200'     # change if needed
        - '--es.indices'
        - '--es.all'
        - '--es.indices_mappings'
        - '--es.aliases'
        - '--es.shards'
        - '--es.indices_settings'
        - '--es.timeout=10s'
        - '--web.listen-address=:9114'

      restart: always
      ports:
      - 59114:9114
      networks:
      - elk-docker

networks:           # This section defines custom networks for use in a Docker Compose file.
  elk-docker:       # This is the name of the network your services will connect to.
    external: true  # Tells Docker Compose not to create this network. 
                    # It must already exist (created outside the current docker-compose.yml context).