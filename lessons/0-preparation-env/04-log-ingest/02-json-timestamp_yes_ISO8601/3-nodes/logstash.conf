input {
  file {
    path => "/usr/share/logstash/logs/access_log.json"  # <-- your path
    start_position => "beginning"
    sincedb_path => "/dev/null"

    # Join pretty-printed JSON objects into a single event
    codec => multiline {
      pattern => "^\s*\{"       # a line that starts with {
      negate  => true
      what    => "previous"     # append non-matching lines to the previous line
    }
  }
}

filter {
  # Turn the joined JSON into fields
  json {
    source => "message"
    remove_field => ["message"]
    tag_on_failure => ["_jsonparsefailure"]
  }

  # Your timestamp looks like: Jul 26, 2025 @ 20:22:02.749
  date {
    match  => ["timestamp", "MMM dd, yyyy '@' HH:mm:ss.SSS"]
    locale => "en"
    target => "@timestamp"
    remove_field => ["timestamp"]
  }

  # The JSON value contains literal quotes: "\"POST /... HTTP/1.1\""
  # Strip the wrapping quotes first
  mutate {
    gsub => ["request", '^"(.*)"$', '\1']
  }

  # Parse request into method, path, version (ECS-ish fields)
  grok {
    match => {
      "request" => '^%{WORD:[http][request][method]} %{URIPATHPARAM:[url][path]} HTTP/%{NUMBER:[http][version]}$'
    }
    tag_on_failure => ["_request_grok_fail"]
  }

  # Normalize a few fields toward ECS
  mutate {
    rename => {
      "ip"     => "[client][ip]"
      "userid" => "[user][name]"
      "status" => "[http][response][status_code]"
      "size"   => "[http][response][body][bytes]"
    }
    convert => {
      "[http][response][status_code]" => "integer"
      "[http][response][body][bytes]" => "integer"
      "line" => "integer"
    }
    add_field => { "event.dataset" => "custom.web" }
  }
}
output {
  elasticsearch {

    ## static name
    index => "${ELASTICSEARCH_INDEX_NAME}"
    
    # other examples
    ## dinamic index name
    # index => "${ELASTICSEARCH_INDEX_NAME}-%{+dd-MM-YYYY-HH-mm}"
    # index => "${ELASTICSEARCH_INDEX_NAME}-%{userid}-%{+dd-MM-YYYY-HH-mm}"
    
    hosts => ["${ELASTICSEARCH_HOST:ELASTICSEARCH_PORT}"]
    user => "${ELASTICSEARCH_USER}"
    password => "${ELASTICSEARCH_PASSWORD}"
    ssl => true
    ssl_certificate_verification => false  
  }

  stdout { codec => rubydebug }
}